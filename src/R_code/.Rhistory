panel.background = element_blank(),
axis.text = element_text(color = "black", size = font_size),
legend.position = "none",
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm"))
plot_20_b1
figure_3abcd <- plot_grid(plot_20_a1, plot_20_a2, plot_20_b1, plot_20_b2, rel_widths = c(1, 1, 1, 1), nrow = 2, axis = "btrl", labels = c('a', 'b', 'c', 'd'), label_x = 0)
ggsave(filename = "./analysis/figures/figure_3abcd.png", plot = figure_3abcd, width = 6.5, height = 6.5)
figure_3 <- plot_grid(figure_3abcd, legend, nrow = 1, rel_widths = c(3, 1), scale = c(1, 0.80), labels = c('', ''))
ggsave(filename = "./analysis/figures/figure_3_box_20.png", plot = figure_3, width = 9, height = 6.5)
ggsave(filename = "./analysis/figures/figure_3_box_20.png", plot = figure_3, width = 9, height = 6.5)
font_size <- 10
# set working directory to: "Desktop/Natural_var_project/"
# loading data
cnn_data <- read.csv(file = "./data/PSICOV_box_20/output/cnn_wt_max_freq.csv", header=TRUE, sep=",")
natural_data <- read.csv(file = "./data/PSICOV_box_20/output/natural_max_freq_files/natural_max_freq_all.csv", header=TRUE, sep=",")
joined_data <- rbind(x = cnn_data, y = natural_data)
joined_data_trimmed <- joined_data %>%
filter(!gene %in% c('1dbx', '1eaz', '1fvg', '1k7j', '1kq6', '1kw4', '1lpy', '1ne2', '1ny1', '1pko', '1rw1', '1vhu', '1w0h', '1wkc', '2tps'))
for_heat <- joined_data_trimmed %>%
select(group, aa, position, gene) %>%
pivot_wider(names_from = group, values_from = aa)
for_heat_sums <- for_heat %>%
group_by(wt, predicted) %>%
summarise(count = n())
for_heat_sums2 <- for_heat_sums %>%
group_by(wt) %>%
mutate(
freq = count/sum(count)) %>%
#freq = ifelse(wt == predicted, NA, freq)) %>%
ungroup()
for_heat_sums2 <- na.omit(for_heat_sums2)
custom_colors <- c("#9875bd", "#ecb613")
for_heatplot_final <- for_heat_sums2 %>%
mutate(
predicted = fct_rev(fct_relevel(predicted, "M","L","I","V","A","C","S","T","N","Q","D","E","R","K","H","Y","F","W","P","G")),
wt = fct_relevel(wt, "M","L","I","V","A","C","S","T","N","Q","D","E","R","K","H","Y","F","W","P","G"))
#add aa class label:
calc_class <- function(x) {
aliphatic = c("M", "L", "I", "V", "A")
small_polar = c("C", "S", "T", "N", "Q")
negative = c("D", "E")
positive = c("R", "K")
aromatic = c("H", "Y", "W", "F")
unique = c("P", "G")
if (x %in% aliphatic) {
return("aliphatic")
}
if (x %in% small_polar) {
return("small_polar")
}
if (x %in% negative) {
return("negative")
}
if (x %in% positive) {
return("positive")
}
if (x %in% aromatic) {
return("aromatic")
}
if (x %in% unique) {
return("unique")
}
return("not found")
}
for_heatplot_with_classes <- for_heatplot_final %>%
mutate(wt_class = map_chr(wt, calc_class)) %>%
mutate(class = fct_relevel(wt_class, "aliphatic", "small_polar", "negative", "positive", "aromatic", "unique"))
gray_zone = tibble(
x = c("G","A","V","M","I","L","S","C","N","T","Q","D","E","H","K","R","F","Y","W","P"),
y = c("G","A","V","M","I","L","S","C","N","T","Q","D","E","H","K","R","F","Y","W","P"),
value = rep(1, times=20))
plot_20_a1 <- ggplot() +
geom_tile(data = for_heatplot_with_classes, aes(x = wt, y = predicted, alpha = freq, fill = class)) +
scale_alpha_continuous(
guide = guide_legend(order = 2, reverse = TRUE),
range = c(0.2, 1.0)) +
scale_fill_manual(
values = c("#991f00", "#001a66", "#994d00", "#1a6600", "#330066", "#9e9e2e"),
guide = guide_legend(order = 1)) +
#geom_tile(data = gray_zone, aes(x,y), fill = "grey57") +
scale_x_discrete(
name = "Wild type residue",
expand = c(0,0)) +
scale_y_discrete(
name = "Predicted residue",
expand = c(0,0)) +
labs(fill = "Wild type class", alpha = "Frequency") +
theme_cowplot(font_size) +
theme(
panel.background = element_blank(),
axis.text = element_text(color = "black", size = font_size),
legend.position = "none",
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm"))
plot_20_a1
colors <-  c("#991f00", "#001a66", "#994d00", "#1a6600", "#330066", "#9e9e2e")
alphas <- c(0.2, 0.4, 0.6, 0.8, 1.0)
class_list <- c("aliphatic", "small_polar", "negative", "positive", "aromatic", "unique")
twoD_legend <- tibble(class = c(rep("aliphatic", times = 5),
rep("small_polar", times = 5),
rep("negative", times = 5),
rep("positive", times = 5),
rep("aromatic", times = 5),
rep("unique", times = 5)),
freq = c(rep(alphas, times = 6)))
twoD_legend <- twoD_legend %>%
mutate(class = fct_relevel(class, "aliphatic", "small_polar", "negative", "positive", "aromatic", "unique"))
legend <- twoD_legend %>%
ggplot(aes(x = class, y = factor(freq), fill = class, alpha = factor(freq))) +
geom_tile() +
scale_fill_manual(
values = c("#991f00", "#001a66", "#994d00", "#1a6600", "#330066", "#9e9e2e"),
guide = guide_legend(order = 1)) +
scale_alpha_manual(
guide = guide_legend(order = 2, reverse = TRUE),
values = c(0.36, 0.52, 0.68, 0.84, 1.0)) +
scale_x_discrete(
name = "Amino acid class",
position = "top",
label = c("aliphatic", "small polar", "negative", "positive", "aromatic", "unique"),
expand = c(0,0)) +
scale_y_discrete(
name = "Frequency \n",
position = "right",
labels = rev(c("1.0", "0.8", "0.6", "0.4", "0.2")),
expand = c(0,0)) +
theme_minimal() +
theme(
legend.position = "none",
panel.grid = element_blank(),
axis.title = element_text(
size = font_size,
color = "black"),
axis.text.x = element_text(
size = font_size,
color = "black",
angle = 45,
hjust = 0.08),
axis.text.y = element_text(
size = font_size,
color = "black"),
aspect.ratio = 5/5)
legend
for_heat_2 <- joined_data %>%
select(group, aa_class, position, gene) %>%
pivot_wider(names_from = group, values_from = aa_class)
for_heat_sums <- for_heat_2 %>%
group_by(wt, predicted) %>%
summarise(count = n())
for_heat_sums2 <- for_heat_sums %>%
group_by(wt) %>%
mutate(freq = count/sum(count)) %>%
#freq = ifelse(wt == predicted, NA, freq)) %>%
ungroup()
for_heat_sums2 <- na.omit(for_heat_sums2)
for_plot_a2 <- for_heat_sums2 %>%
mutate(
wt = fct_relevel(wt, "aliphatic", "small_polar", "negative", "positive", "aromatic", "unique"),
predicted = fct_rev(fct_relevel(predicted, "aliphatic", "small_polar", "negative", "positive", "aromatic", "unique"))
)
gray_zone2 = tibble(
x = c("aliphatic", "small_polar", "negative", "positive", "aromatic", "unique"),
y = c("aliphatic", "small_polar", "negative", "positive", "aromatic", "unique"),
value = rep(1, times=6))
plot_20_a2 <- ggplot() +
geom_tile(data = for_plot_a2, aes(x = wt, y = predicted, alpha = freq, fill = wt)) +
#geom_tile(data = gray_zone2, aes(x,y), fill = "grey57") +
scale_alpha_continuous(
guide = guide_legend(order = 2, reverse = TRUE),
range = c(0.2, 1)) +
scale_fill_manual(
values = c("#991f00", "#001a66", "#994d00", "#1a6600", "#330066", "#9e9e2e"),
guide = guide_legend(order = 1) ) +
scale_x_discrete(
name = "Wild type residue class",
label = c("aliphatic", "small polar", "negative", "positive", "aromatic", "unique"),
expand = c(0,0)) +
scale_y_discrete(
name = "Predicted residue class",
label = c("unique", "aromatic", "positive", "negative", "small polar", "aliphatic"),
expand = c(0,0)) +
labs(fill = "Wild type class", alpha = "Frequency") +
theme_cowplot(font_size) +
theme(
panel.background = element_blank(),
axis.text = element_text(
color = "black",
size = font_size),
axis.text.x = element_text(
angle = 45,
hjust = 1),
legend.position = "none",
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm"))
plot_20_a2
figure_3a <- plot_grid(plot_20_a1, plot_20_a2, nrow = 1, align = "h", labels = c('a', 'b'), label_x = 0)
ggsave(filename = "./analysis/figures/figure_3a.png", plot = figure_3a, width = 10, height = 4.5)
for_heat_3 <- joined_data %>%
select(group, aa_class, position, gene) %>%
pivot_wider(names_from = group, values_from = aa_class)
for_heat_sums <- for_heat_2 %>%
group_by(natural_max, predicted) %>%
summarise(count = n())
for_heat_sums2 <- for_heat_sums %>%
group_by(natural_max) %>%
mutate(freq = count/sum(count)) %>%
ungroup()
for_heat_sums2 <- na.omit(for_heat_sums2)
for_plot_b2 <- for_heat_sums2 %>%
mutate(
natural_max = fct_relevel(natural_max, "aliphatic", "small_polar", "negative", "positive", "aromatic", "unique"),
predicted = fct_rev(fct_relevel(predicted, "aliphatic", "small_polar", "negative", "positive", "aromatic", "unique"))
)
plot_20_b2 <- for_plot_b2 %>%
ggplot(aes(x = natural_max, y = predicted, alpha = freq, fill = natural_max)) +
geom_tile() +
scale_alpha_continuous(
guide = guide_legend(order = 2, reverse = TRUE),
range = c(0.2, 1)) +
scale_fill_manual(
values = c("#991f00", "#001a66", "#994d00", "#1a6600", "#330066", "#9e9e2e"),
guide = 'none' ) +
scale_x_discrete(
name = "Consensus residue class",
label = c("aliphatic", "small polar", "negative", "positive", "aromatic", "unique"),
expand = c(0,0)) +
scale_y_discrete(
name = "Predicted residue class",
label = c("unique", "aromatic", "positive", "negative", "small polar", "aliphatic"),
expand = c(0,0)) +
labs(fill = "Consensus \n class", alpha = "Frequency") +
theme_cowplot(font_size) +
theme(
panel.background = element_blank(),
axis.text = element_text(
color = "black",
size = font_size),
axis.text.x = element_text(
angle = 45,
hjust = 1),
legend.position = "none",
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm"))
plot_20_b2
# predicting consensus heat map:
for_heat_4 <- joined_data %>%
select(group, aa, position, gene) %>%
pivot_wider(names_from = group, values_from = aa)
for_heat_sums <- for_heat_4 %>%
group_by(natural_max, predicted) %>%
summarise(count = n())
for_heat_sums2 <- for_heat_sums %>%
group_by(natural_max) %>%
mutate(
freq = count/sum(count)) %>%
#freq = ifelse(natural_max == predicted, NA, freq)) %>%
ungroup()
for_heat_4 <- na.omit(for_heat_sums2)
for_heatplot_final <- for_heat_4 %>%
mutate(
predicted = fct_rev(fct_relevel(predicted, "M","L","I","V","A","C","S","T","N","Q","D","E","R","K","H","Y","F","W","P","G")),
wt = fct_relevel(natural_max, "M","L","I","V","A","C","S","T","N","Q","D","E","R","K","H","Y","F","W","P","G"))
for_heatplot_with_classes <- for_heatplot_final %>%
mutate(natural_max_class = map_chr(natural_max, calc_class)) %>%
mutate(class = fct_relevel(natural_max_class, "aliphatic", "small_polar", "negative", "positive", "aromatic", "unique"))
plot_20_b1 <- for_heatplot_with_classes %>%
ggplot(aes(
x = fct_relevel(natural_max, "M","L","I","V","A","C","S","T","N","Q","D","E","R","K","H","Y","F","W","P","G"),
y = fct_rev(fct_relevel(predicted, "M","L","I","V","A","C","S","T","N","Q","D","E","R","K","H","Y","F","W","P","G")),
alpha = freq,
fill = class)) +
geom_tile() +
scale_alpha_continuous(
guide = guide_legend(order = 1, reverse = TRUE),
range = c(0.2, 1)) +
scale_fill_manual(
values = c("#991f00", "#001a66", "#994d00", "#1a6600", "#330066", "#9e9e2e"),
guide = 'none') +
scale_x_discrete(
name = "Consensus residue",
expand = c(0,0)) +
scale_y_discrete(
name = "Predicted residue",
expand = c(0,0)) +
#labs(fill = "Consensus Class", alpha = "Frequency") +
theme_cowplot(font_size) +
theme(
panel.background = element_blank(),
axis.text = element_text(color = "black", size = font_size),
legend.position = "none",
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm"))
plot_20_b1
figure_3abcd <- plot_grid(plot_20_a1, plot_20_a2, plot_20_b1, plot_20_b2, rel_widths = c(1, 1, 1, 1), nrow = 2, axis = "btrl", labels = c('a', 'b', 'c', 'd'), label_x = 0)
ggsave(filename = "./analysis/figures/figure_3abcd.png", plot = figure_3abcd, width = 6.5, height = 6.5)
figure_3 <- plot_grid(figure_3abcd, legend, nrow = 1, rel_widths = c(3, 1), scale = c(1, 0.80), labels = c('', ''))
ggsave(filename = "./analysis/figures/figure_3_box_20.png", plot = figure_3, width = 9, height = 6.5)
cnn_data <- read.csv(file = "./cnn_wt_max_freq.csv", header=TRUE, sep=",")
ggsave(filename = "./analysis/figures/figure_3_box_20.png", plot = figure_3, width = 9, height = 6.5)
joined_data_trimmed <- joined_data %>%
filter(!gene %in% c('1dbx', '1eaz', '1fvg', '1k7j', '1kq6', '1kw4', '1lpy', '1ne2', '1ny1', '1pko', '1rw1', '1vhu', '1w0h', '1wkc', '2tps'))
all_joined_wide <- joined_data_trimmed %>%
select(-n_eff_class) %>%
pivot_wider(names_from = group, values_from = n_eff)
all_joined <- rbind(joined_20, joined_40, joined_60, joined_80, joined_100)
# continuation of figure 2.
# comparing neff predicted vs. neff natural across different alignments similarities.
library(tidyverse)
library(cowplot)
library(broom)
library(stats)
box_size = "20"
# useful function for getting mean and standard of deviation (for violin plots):
data_summary <- function(x) {
m <- mean(x)
ymin <- m-sd(x)
ymax <- m+sd(x)
return(c(y=m,ymin=ymin,ymax=ymax))
}
# reading csv files
natural_var <- read.csv(file="./output/output_PSICOV/stats_align_all.csv", header=TRUE, sep=",")
natural_var_20 <- read.csv(file = "./output/output_PSICOV/stats_align_files/stats_align_20.csv", header=TRUE, sep=",")
natural_var_40 <- read.csv(file = "./output/output_PSICOV/stats_align_files/stats_align_40.csv", header=TRUE, sep=",")
natural_var_60 <- read.csv(file = "./output/output_PSICOV/stats_align_files/stats_align_60.csv", header=TRUE, sep=",")
natural_var_80 <- read.csv(file = "./output/output_PSICOV/stats_align_files/stats_align_80.csv", header=TRUE, sep=",")
natural_var_100 <- read.csv(file = "./output/output_PSICOV/stats_align_files/stats_align_100.csv", header=TRUE, sep=",")
cnn_var <- read.csv(file= paste0("./data/PSICOV_box_",box_size,"/output/stats_cnn.csv"), header=TRUE, sep=",")
cnn_var2 <- cnn_var %>%
select(position, gene, n_eff, n_eff_class) %>%
mutate(group = "predicted")
#0-20
natural_var_20 <- natural_var_20 %>%
select(position, gene, n_eff, n_eff_class) %>%
mutate(group = "natural")
joined_20 <- rbind(natural_var_20, cnn_var2) %>%
mutate(perc_sim = "(0-20%]")
#20-40
natural_var_40 <- natural_var_40 %>%
select(position, gene, n_eff, n_eff_class) %>%
mutate(group = "natural")
joined_40 <- rbind(natural_var_40, cnn_var2) %>%
mutate(perc_sim = "(20-40%]")
#40-60
natural_var_60 <- natural_var_60 %>%
select(position, gene, n_eff, n_eff_class) %>%
mutate(group = "natural")
joined_60 <- rbind(natural_var_60, cnn_var2) %>%
mutate(perc_sim = "(40-60%]")
#60-80
natural_var_80 <- natural_var_80 %>%
select(position, gene, n_eff, n_eff_class) %>%
mutate(group = "natural")
joined_80 <- rbind(natural_var_80, cnn_var2) %>%
mutate(perc_sim = "(60-80%]")
#80-100
natural_var_100 <- natural_var_100 %>%
select(position, gene, n_eff, n_eff_class) %>%
mutate(group = "natural")
joined_100 <- rbind(natural_var_100, cnn_var2) %>%
mutate(perc_sim = "(80-100%]")
all_joined <- rbind(joined_20, joined_40, joined_60, joined_80, joined_100)
joined_data_trimmed <- joined_data %>%
filter(!gene %in% c('1dbx', '1eaz', '1fvg', '1k7j', '1kq6', '1kw4', '1lpy', '1ne2', '1ny1', '1pko', '1rw1', '1vhu', '1w0h', '1wkc', '2tps'))
all_joined_wide <- joined_data_trimmed %>%
select(-n_eff_class) %>%
pivot_wider(names_from = group, values_from = n_eff)
joined_data_trimmed <- joined_data %>%
filter(!gene %in% c('1dbx', '1eaz', '1fvg', '1k7j', '1kq6', '1kw4', '1lpy', '1ne2', '1ny1', '1pko', '1rw1', '1vhu', '1w0h', '1wkc', '2tps'))
all_joined_wide <- joined_data_trimmed %>%
select(-n_eff_class) %>%
pivot_wider(names_from = group, values_from = n_eff)
all_joined <- rbind(joined_20, joined_40, joined_60, joined_80, joined_100)
joined_data_trimmed <- all_joined %>%
filter(!gene %in% c('1dbx', '1eaz', '1fvg', '1k7j', '1kq6', '1kw4', '1lpy', '1ne2', '1ny1', '1pko', '1rw1', '1vhu', '1w0h', '1wkc', '2tps'))
all_joined_wide <- joined_data_trimmed %>%
select(-n_eff_class) %>%
pivot_wider(names_from = group, values_from = n_eff)
# fitting a linear model to data (getting R^2 and p-values)
lm_summary <- all_joined_wide %>%
na.omit() %>%
nest(data = -c(gene, perc_sim)) %>%
mutate(
fit = map(data, ~lm(natural ~ predicted, data = .x)),
glance_out = map(fit, glance)
) %>%
select(gene, perc_sim, glance_out) %>%
unnest(cols = glance_out)
lm_summary
# getting rid of the genes that are not present in all 5 groups:
lm_summary <- lm_summary %>%
select(gene, perc_sim, r.squared, p.value)
# making two dataframes for correlation coefficients and p-values:
cor_coeffs <- lm_summary %>%
select(gene, perc_sim, r.squared)
p_values <- lm_summary %>%
select(gene, perc_sim, p.value)
p_values
# false discovery correction is applied to the p-values:
new_p_values <- p_values %>%
nest(data = -c(perc_sim)) %>%
mutate(
new_p = map(data, ~p.adjust(.x$p.value, method = "fdr", n = length(.x$p.value)))
) %>%
unnest(cols = c(data, new_p))
# removing genes that are not found across all 5 similarity groups:
cor_coeffs_wide <- cor_coeffs %>%
pivot_wider(names_from = perc_sim, values_from = r.squared)
p_values_wide <- new_p_values %>%
select(perc_sim, gene, new_p) %>%
pivot_wider(names_from = perc_sim, values_from = new_p)
cor_coeffs_reduced <- na.omit(cor_coeffs_wide)
p_values_reduced <- na.omit(p_values_wide)
# making both dataframes longer again for plotting:
cor_coeffs <- cor_coeffs_reduced %>%
pivot_longer(
cols = -gene,
names_to = "perc_sim",
values_to = c("r_squared"))
p_values <- p_values_reduced %>%
pivot_longer(
cols = -gene,
names_to = "perc_sim",
values_to = c("p_value"))
# labeling the significant p-values:
p_values <- p_values %>%
mutate(signif = ifelse(p_value <= 0.05, TRUE, FALSE))
#FINDING CORRELATION COEFFS:
# an alternative method for finding the correlations:
cor <- all_joined_wide %>%
na.omit() %>%
group_by(gene, perc_sim) %>%
summarise(cor = cor(natural, predicted))
# getting rid of the genes that are not present in all 5 groups:
cor_wider <- cor %>%
pivot_wider(names_from = perc_sim, values_from = cor)
cor_reduced <- na.omit(cor_wider)
cor_reduced <- cor_reduced %>%
pivot_longer(cols =  c("(0-20%]", "(20-40%]", "(40-60%]", "(60-80%]", "(80-100%]"), names_to = "perc_sim", values_to = "cor")
# filtering for the correlations that are significant:
# you need this for the figure_6_box_size.R script
joined_cors_1 <- inner_join(p_values, cor_reduced)
get_x_value <- function(perc_sim){
if (perc_sim == "(0-20%]") {
x_value <- as.numeric(1)
} else if (perc_sim == "(20-40%]") {
x_value <- as.numeric()
} else if (perc_sim == "(40-60%]") {
x_value <- as.numeric(1)
} else if (perc_sim == "(60-80%]") {
x_value <- as.numeric(1)
} else {
x_value <- as.numeric(1)
}
return(x_value)
}
joined_cors_1 <- joined_cors_1 %>%
group_by(gene) %>%
mutate(
# pick y value corresponding to y3
color_y = sum(cor * (perc_sim == "(40-60%]")),
dx = rnorm(n(), mean = 0, sd = .05),
dy = rnorm(n(), mean = 0, sd = .05),
x_value = as.numeric(factor(perc_sim)))
sig_cor <- joined_cors_1 %>%
filter(signif == TRUE) %>%
select(cor, perc_sim, gene, dx, dy, color_y)
get_dx_dy <- function(perc_sim){
return(rnorm(n(), mean = map(perc_sim, get_x_value), sd = 0.1))
}
# filtering for the correlations that are **NOT** significant:
not_signif <- joined_cors_1 %>%
filter(signif == FALSE) %>%
select(cor, perc_sim, gene, dx, dy, color_y)
not_signif
plot_a <- ggplot() +
geom_path(
data = not_signif,
aes(x = as.numeric(factor(perc_sim))+dx, y = cor+dy, group = gene, color = color_y),
size = 0.25) +
geom_path(
data = sig_cor,
aes(x = as.numeric(factor(perc_sim))+dx, y = cor+dy, group = gene, color = color_y),
size = 0.25) +
geom_point(
data = not_signif,
aes(x = as.numeric(factor(perc_sim))+dx, y = cor+dy, group = gene),
shape = 21,
color = "black",
fill = "white",
size = 2) +
geom_point(
data = sig_cor,
aes(x = as.numeric(factor(perc_sim))+dx, y = cor+dy, group = gene, fill = color_y),
shape = 21,
color = "black",
size = 2) +
scale_x_continuous(
name = "Percent sequence similarity to wild type",
limits = c(0.5,5.5),
labels = c("(0-20%]", "(20-40%]", "(40-60%]", "(60-80%]", "(80-100%]"),
breaks = (seq(from = 1, to = 5, by = 1))) +
scale_y_continuous(
name = "Correlation Coefficients",
limits = c(-0.25, 0.7),
breaks = seq(from = -0.2, to = 0.6, by = 0.1),
expand = c(0, 0)) +
scale_color_gradient(
aesthetics = c("color", "fill"),
high = "#ffd966",
low = "#080845") +
theme_bw(16) +
theme(
legend.position = "none",
axis.text = element_text(color = "black", size = 16),
panel.grid.minor = element_blank())
plot_a
