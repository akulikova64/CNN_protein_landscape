theme(plot.title = element_text(hjust=0.5), plot.subtitle = element_text(hjust=0.5)) +
ylab("N-eff Predicted") +
xlab("N-eff Natural")
# scatter plot
c <- n_eff_data_wide %>%
filter(gene == goi_3) %>%
ggplot(aes(x = natural, y = predicted)) +
geom_point(color = purple) +
ggtitle(label = goi_3) +
geom_abline(slope = slope_3, intercept = intercept_3, color = "grey65" ) +
stat_cor(label.y = 12, label.x = 8) +
stat_regline_equation(label.y = 10.5, label.x = 8) +
theme_cowplot() +
scale_colour_manual(values = purple, aesthetics = c("colour", "fill")) +
theme(plot.title = element_text(hjust=0.5), plot.subtitle = element_text(hjust=0.5)) +
ylab("N-eff Predicted") +
xlab("N-eff Natural") +
coord_cartesian(xlim = c(1, 16), ylim = c(1, 12.5)) +
scale_x_continuous(breaks = seq(2, 16, by = 2)) +
scale_y_continuous(breaks = seq(-12, 12, by = 2))
n_eff_data_wide %>%
filter(gene == goi_3) %>%
ggplot(aes(x = natural, y = predicted)) +
geom_point(color = purple) +
ggtitle(label = goi_3) +
geom_abline(slope = slope_3, intercept = intercept_3, color = "grey65" ) +
stat_cor(label.y = 12, label.x = 8) +
stat_regline_equation(label.y = 10.5, label.x = 8) +
theme_cowplot() +
scale_colour_manual(values = purple, aesthetics = c("colour", "fill")) +
theme(plot.title = element_text(hjust=0.5), plot.subtitle = element_text(hjust=0.5)) +
ylab("N-eff Predicted") +
xlab("N-eff Natural") +
coord_cartesian(xlim = c(1, 16), ylim = c(1, 12.5)) +
scale_x_continuous(breaks = seq(2, 16, by = 2)) +
scale_y_continuous(breaks = seq(-12, 12, by = 2))
n_eff_data_wide %>%
filter(gene == goi_3) %>%
ggplot(aes(x = natural, y = predicted)) +
geom_point(color = purple) +
ggtitle(label = goi_3) +
geom_abline(slope = slope_3, intercept = intercept_3, color = "grey65" ) +
stat_cor(label.y = 12, label.x = 8) +
stat_regline_equation(label.y = 10.5, label.x = 8) +
theme_cowplot() +
scale_colour_manual(values = purple, aesthetics = c("colour", "fill")) +
theme(plot.title = element_text(hjust=0.5), plot.subtitle = element_text(hjust=0.5)) +
ylab("N-eff Predicted") +
xlab("N-eff Natural") +
coord_cartesian(xlim = c(1, 16), ylim = c(-12, 12.5)) +
scale_x_continuous(breaks = seq(2, 16, by = 2)) +
scale_y_continuous(breaks = seq(-12, 12, by = 2))
goi_1 = "1iwd"
goi_2 = "1lpy"
goi_3 = "1lm4"
# third gene:
linear_reg_3 <- n_eff_data_wide %>%
filter(gene == goi_3) %>%
select(predicted, natural) %>%
lm(formula = predicted ~ natural)
summary(linear_reg_3)
slope_3 <- linear_reg_3$coefficients[2]
intercept_3 <- linear_reg_3$coefficients[1]
n_eff_data_wide %>%
filter(gene == goi_3) %>%
ggplot(aes(x = natural, y = predicted)) +
geom_point(color = purple) +
ggtitle(label = goi_3) +
geom_abline(slope = slope_3, intercept = intercept_3, color = "grey65" ) +
stat_cor(label.y = 12, label.x = 8) +
stat_regline_equation(label.y = 10.5, label.x = 8) +
theme_cowplot() +
scale_colour_manual(values = purple, aesthetics = c("colour", "fill")) +
theme(plot.title = element_text(hjust=0.5), plot.subtitle = element_text(hjust=0.5)) +
ylab("N-eff Predicted") +
xlab("N-eff Natural") +
coord_cartesian(xlim = c(1, 16), ylim = c(2, 12.5)) +
scale_x_continuous(breaks = seq(2, 16, by = 2)) +
scale_y_continuous(breaks = seq(2, 12, by = 2))
# scatter plot
c <- n_eff_data_wide %>%
filter(gene == goi_3) %>%
ggplot(aes(x = natural, y = predicted)) +
geom_point(color = purple) +
ggtitle(label = goi_3) +
geom_abline(slope = slope_3, intercept = intercept_3, color = "grey65" ) +
stat_cor(label.y = 12, label.x = 8) +
stat_regline_equation(label.y = 10.5, label.x = 8) +
theme_cowplot() +
scale_colour_manual(values = purple, aesthetics = c("colour", "fill")) +
theme(plot.title = element_text(hjust=0.5), plot.subtitle = element_text(hjust=0.5)) +
ylab("N-eff Predicted") +
xlab("N-eff Natural") +
coord_cartesian(xlim = c(1, 16), ylim = c(2, 12.5)) +
scale_x_continuous(breaks = seq(2, 16, by = 2)) +
scale_y_continuous(breaks = seq(2, 12, by = 2))
library(tidyverse)
library(yardstick)
library(ggpubr)
library(cowplot)
library(sqldf)
library(sinaplot)
library(dplyr)
library(ggforce)
# reading csv files
natural_var <- read.csv(file="./stats_align_all.csv", header=TRUE, sep=",")
cnn_var <- read.csv(file="./stats_cnn.csv", header=TRUE, sep=",")
natural_var <- natural_var %>%
select(-c(q_H:n_eff)) %>%
nest(q_natural = c(q_aliphatic:q_proline))
cnn_var <- cnn_var %>%
select(-c(q_H:n_eff)) %>%
nest(q_cnn = c(q_aliphatic:q_proline))
joined_data <- inner_join(x = natural_var, y = cnn_var, by = c('position', 'gene'))
# comparing n_eff between cnn and natural data.
n_eff_data_1 <- joined_data %>%
select(n_eff_class.x, gene, position)
names(n_eff_data_1) <- c('n_eff_class', 'gene', 'position')
n_eff_data_1$group <- 'natural'
n_eff_data_2 <- joined_data %>%
select(n_eff_class.y, gene, position)
names(n_eff_data_2) <- c('n_eff_class', 'gene', 'position')
n_eff_data_2$group <- 'predicted'
n_eff_data <- rbind(n_eff_data_1, n_eff_data_2)
# making df wider for plot
n_eff_data_wide_2 <- n_eff_data %>%
pivot_wider(names_from = group, values_from = n_eff_class)
n_eff_data <- rbind(n_eff_data_1, n_eff_data_2)
View(n_eff_data)
n_eff_unique_2 <- unique(n_eff_data)
#restart r
library(dplyr)
n_eff_averaged_2 <- n_eff_unique_2 %>%
group_by(gene, position, group) %>%
summarise(n_eff = mean(n_eff))
View(n_eff_unique_2)
n_eff_averaged_2 <- n_eff_unique_2 %>%
group_by(gene, position, group) %>%
summarise(n_eff = mean(n_eff_class))
library(tidyr)
# making df wider for plot
n_eff_data_wide_2 <- n_eff_averaged_2 %>%
pivot_wider(names_from = group, values_from = n_eff_class)
n_eff_averaged_2 <- n_eff_unique_2 %>%
group_by(gene, position, group) %>%
summarise(n_eff_class = mean(n_eff_class))
library(tidyr)
# making df wider for plot
n_eff_data_wide_2 <- n_eff_averaged_2 %>%
pivot_wider(names_from = group, values_from = n_eff_class)
library(dplyr)
cor_2 <- n_eff_data_wide_2 %>%
select(gene, natural, predicted) %>%
na.omit() %>%
group_by(gene) %>%
summarise(cor = cor(natural, predicted)) %>%
mutate(group = "by class")
View(cor_2)
#finding the linear regression
linear_reg_4 <- n_eff_data_wide %>%
filter(gene == goi_1) %>%
select(predicted, natural) %>%
lm(formula = predicted ~ natural)
summary(linear_reg_4)
slope_4 <- linear_reg_4$coefficients[2]
intercept_4 <- linear_reg_4$coefficients[1]
n_eff_data_wide_2 %>%
filter(gene == goi_1) %>%
ggplot(aes(x = natural, y = predicted)) +
geom_point(color = mustard) +
ggtitle(label = goi_1) +
geom_abline(slope = slope_4, intercept = intercept_4, color = "grey65" ) +
stat_cor(label.y = 12, label.x = 8) +
stat_regline_equation(label.y = 10.5, label.x = 8) +
theme_cowplot()+
scale_colour_manual(values = mustard, aesthetics = c("colour", "fill")) +
theme(plot.title = element_text(hjust=0.5), plot.subtitle = element_text(hjust=0.5)) +
ylab("N-eff Class Predicted") +
xlab("N-eff Class Natural") +
coord_cartesian(xlim = c(1, 12), ylim = c(1, 12)) +
scale_x_continuous(breaks = seq(2, 12, by = 2)) +
scale_y_continuous(breaks = seq(2, 12, by = 2))
library(tidyverse)
library(yardstick)
library(ggpubr)
library(cowplot)
library(sqldf)
library(sinaplot)
library(dplyr)
library(ggforce)
n_eff_data_wide_2 %>%
filter(gene == goi_1) %>%
ggplot(aes(x = natural, y = predicted)) +
geom_point(color = mustard) +
ggtitle(label = goi_1) +
geom_abline(slope = slope_4, intercept = intercept_4, color = "grey65" ) +
stat_cor(label.y = 12, label.x = 8) +
stat_regline_equation(label.y = 10.5, label.x = 8) +
theme_cowplot()+
scale_colour_manual(values = mustard, aesthetics = c("colour", "fill")) +
theme(plot.title = element_text(hjust=0.5), plot.subtitle = element_text(hjust=0.5)) +
ylab("N-eff Class Predicted") +
xlab("N-eff Class Natural") +
coord_cartesian(xlim = c(1, 12), ylim = c(1, 12)) +
scale_x_continuous(breaks = seq(2, 12, by = 2)) +
scale_y_continuous(breaks = seq(2, 12, by = 2))
n_eff_data_wide_2 %>%
filter(gene == goi_1) %>%
ggplot(aes(x = natural, y = predicted)) +
geom_point(color = mustard) +
ggtitle(label = goi_1) +
geom_abline(slope = slope_4, intercept = intercept_4, color = "grey65" ) +
stat_cor(label.y = 12, label.x = 8) +
stat_regline_equation(label.y = 10.5, label.x = 8) +
theme_cowplot()+
scale_colour_manual(values = mustard, aesthetics = c("colour", "fill")) +
theme(plot.title = element_text(hjust=0.5), plot.subtitle = element_text(hjust=0.5)) +
ylab("N-eff Class Predicted") +
xlab("N-eff Class Natural") +
coord_cartesian(xlim = c(1, 16), ylim = c(2, 12.5)) +
scale_x_continuous(breaks = seq(2, 16, by = 2)) +
scale_y_continuous(breaks = seq(2, 12, by = 2))
# scatter plot
a2 <- n_eff_data_wide_2 %>%
filter(gene == goi_1) %>%
ggplot(aes(x = natural, y = predicted)) +
geom_point(color = mustard) +
ggtitle(label = goi_1) +
geom_abline(slope = slope_4, intercept = intercept_4, color = "grey65" ) +
stat_cor(label.y = 12, label.x = 8) +
stat_regline_equation(label.y = 10.5, label.x = 8) +
theme_cowplot()+
scale_colour_manual(values = mustard, aesthetics = c("colour", "fill")) +
theme(plot.title = element_text(hjust=0.5), plot.subtitle = element_text(hjust=0.5)) +
ylab("N-eff Class Predicted") +
xlab("N-eff Class Natural") +
coord_cartesian(xlim = c(1, 16), ylim = c(1, 12.5)) +
scale_x_continuous(breaks = seq(2, 16, by = 2)) +
scale_y_continuous(breaks = seq(2, 12, by = 2))
n_eff_data_wide_2 %>%
filter(gene == goi_1) %>%
ggplot(aes(x = natural, y = predicted)) +
geom_point(color = mustard) +
ggtitle(label = goi_1) +
geom_abline(slope = slope_4, intercept = intercept_4, color = "grey65" ) +
stat_cor(label.y = 12, label.x = 8) +
stat_regline_equation(label.y = 10.5, label.x = 8) +
theme_cowplot()+
scale_colour_manual(values = mustard, aesthetics = c("colour", "fill")) +
theme(plot.title = element_text(hjust=0.5), plot.subtitle = element_text(hjust=0.5)) +
ylab("N-eff Class Predicted") +
xlab("N-eff Class Natural") +
coord_cartesian(xlim = c(1, 16), ylim = c(0, 12.5)) +
scale_x_continuous(breaks = seq(2, 16, by = 2)) +
scale_y_continuous(breaks = seq(2, 12, by = 2))
n_eff_data_wide_2 %>%
filter(gene == goi_1) %>%
ggplot(aes(x = natural, y = predicted)) +
geom_point(color = mustard) +
ggtitle(label = goi_1) +
geom_abline(slope = slope_4, intercept = intercept_4, color = "grey65" ) +
stat_cor(label.y = 12, label.x = 8) +
stat_regline_equation(label.y = 10.5, label.x = 8) +
theme_cowplot()+
scale_colour_manual(values = mustard, aesthetics = c("colour", "fill")) +
theme(plot.title = element_text(hjust=0.5), plot.subtitle = element_text(hjust=0.5)) +
ylab("N-eff Class Predicted") +
xlab("N-eff Class Natural") +
coord_cartesian(xlim = c(1, 16), ylim = c(1, 12.5)) +
scale_x_continuous(breaks = seq(2, 16, by = 2)) +
scale_y_continuous(breaks = seq(2, 12, by = 2))
# scatter plot
c <- n_eff_data_wide %>%
filter(gene == goi_3) %>%
ggplot(aes(x = natural, y = predicted)) +
geom_point(color = purple) +
ggtitle(label = goi_3) +
geom_abline(slope = slope_3, intercept = intercept_3, color = "grey65" ) +
stat_cor(label.y = 12, label.x = 8) +
stat_regline_equation(label.y = 10.5, label.x = 8) +
theme_cowplot() +
scale_colour_manual(values = purple, aesthetics = c("colour", "fill")) +
theme(plot.title = element_text(hjust=0.5), plot.subtitle = element_text(hjust=0.5)) +
ylab("N-eff Predicted") +
xlab("N-eff Natural") +
coord_cartesian(xlim = c(1, 16), ylim = c(1, 12.5)) +
scale_x_continuous(breaks = seq(2, 16, by = 2)) +
scale_y_continuous(breaks = seq(2, 12, by = 2))
# scatter plot
a2 <- n_eff_data_wide_2 %>%
filter(gene == goi_1) %>%
ggplot(aes(x = natural, y = predicted)) +
geom_point(color = mustard) +
ggtitle(label = goi_1) +
geom_abline(slope = slope_4, intercept = intercept_4, color = "grey65" ) +
stat_cor(label.y = 12, label.x = 8) +
stat_regline_equation(label.y = 10.5, label.x = 8) +
theme_cowplot()+
scale_colour_manual(values = mustard, aesthetics = c("colour", "fill")) +
theme(plot.title = element_text(hjust=0.5), plot.subtitle = element_text(hjust=0.5)) +
ylab("N-eff Class Predicted") +
xlab("N-eff Class Natural") +
coord_cartesian(xlim = c(1, 16), ylim = c(1, 12.5)) +
scale_x_continuous(breaks = seq(2, 16, by = 2)) +
scale_y_continuous(breaks = seq(2, 12, by = 2))
#second plot: finding the linear regression
linear_reg_5 <- n_eff_data_wide %>%
filter(gene == goi_2) %>%
select(predicted, natural) %>%
lm(formula = predicted ~ natural)
summary(linear_reg_5)
slope_5 <- linear_reg_5$coefficients[2]
intercept_5 <- linear_reg_5$coefficients[1]
n_eff_data_wide_2 %>%
filter(gene == goi_2) %>%
ggplot(aes(x = natural, y = predicted)) +
geom_point(color = mustard) +
ggtitle(label = goi_2) +
geom_abline(slope = slope_5, intercept = intercept_5, color = "grey65" ) +
stat_cor(label.y = 12, label.x = 8) +
stat_regline_equation(label.y = 10.5, label.x = 8) +
theme_cowplot()+
scale_colour_manual(values = mustard, aesthetics = c("colour", "fill")) +
theme(plot.title = element_text(hjust=0.5), plot.subtitle = element_text(hjust=0.5)) +
ylab("N-eff Class Predicted") +
xlab("N-eff Class Natural")+
coord_cartesian(xlim = c(1, 16), ylim = c(2, 12.5)) +
scale_x_continuous(breaks = seq(2, 16, by = 2)) +
scale_y_continuous(breaks = seq(2, 12, by = 2))
# scatter plot
b2 <- n_eff_data_wide_2 %>%
filter(gene == goi_2) %>%
ggplot(aes(x = natural, y = predicted)) +
geom_point(color = mustard) +
ggtitle(label = goi_2) +
geom_abline(slope = slope_5, intercept = intercept_5, color = "grey65" ) +
stat_cor(label.y = 12, label.x = 8) +
stat_regline_equation(label.y = 10.5, label.x = 8) +
theme_cowplot()+
scale_colour_manual(values = mustard, aesthetics = c("colour", "fill")) +
theme(plot.title = element_text(hjust=0.5), plot.subtitle = element_text(hjust=0.5)) +
ylab("N-eff Class Predicted") +
xlab("N-eff Class Natural")+
coord_cartesian(xlim = c(1, 16), ylim = c(2, 12.5)) +
scale_x_continuous(breaks = seq(2, 16, by = 2)) +
scale_y_continuous(breaks = seq(2, 12, by = 2))
n_eff_data_wide_2 %>%
filter(gene == goi_2) %>%
ggplot(aes(x = natural, y = predicted)) +
geom_point(color = mustard) +
ggtitle(label = goi_2) +
geom_abline(slope = slope_5, intercept = intercept_5, color = "grey65" ) +
stat_cor(label.y = 12, label.x = 8) +
stat_regline_equation(label.y = 10.5, label.x = 8) +
theme_cowplot()+
scale_colour_manual(values = mustard, aesthetics = c("colour", "fill")) +
theme(plot.title = element_text(hjust=0.5), plot.subtitle = element_text(hjust=0.5)) +
ylab("N-eff Class Predicted") +
xlab("N-eff Class Natural")+
coord_cartesian(xlim = c(1, 16), ylim = c(1, 12.5)) +
scale_x_continuous(breaks = seq(2, 16, by = 2)) +
scale_y_continuous(breaks = seq(2, 12, by = 2))
# scatter plot
b2 <- n_eff_data_wide_2 %>%
filter(gene == goi_2) %>%
ggplot(aes(x = natural, y = predicted)) +
geom_point(color = mustard) +
ggtitle(label = goi_2) +
geom_abline(slope = slope_5, intercept = intercept_5, color = "grey65" ) +
stat_cor(label.y = 12, label.x = 8) +
stat_regline_equation(label.y = 10.5, label.x = 8) +
theme_cowplot()+
scale_colour_manual(values = mustard, aesthetics = c("colour", "fill")) +
theme(plot.title = element_text(hjust=0.5), plot.subtitle = element_text(hjust=0.5)) +
ylab("N-eff Class Predicted") +
xlab("N-eff Class Natural")+
coord_cartesian(xlim = c(1, 16), ylim = c(1, 12.5)) +
scale_x_continuous(breaks = seq(2, 16, by = 2)) +
scale_y_continuous(breaks = seq(2, 12, by = 2))
#third plot: finding the linear regression
linear_reg_6 <- n_eff_data_wide %>%
filter(gene == goi_3) %>%
select(predicted, natural) %>%
lm(formula = predicted ~ natural)
summary(linear_reg_6)
slope_6 <- linear_reg_6$coefficients[2]
intercept_6 <- linear_reg_6$coefficients[1]
n_eff_data_wide_2 %>%
filter(gene == goi_3) %>%
ggplot(aes(x = natural, y = predicted)) +
geom_point(color = mustard) +
ggtitle(label = goi_3) +
geom_abline(slope = slope_6, intercept = intercept_6, color = "grey65" ) +
stat_cor(label.y = 12, label.x = 8) +
stat_regline_equation(label.y = 10.5, label.x = 8) +
theme_cowplot()+
scale_colour_manual(values = mustard, aesthetics = c("colour", "fill")) +
theme(plot.title = element_text(hjust=0.5), plot.subtitle = element_text(hjust=0.5)) +
ylab("N-eff Class Predicted") +
xlab("N-eff Class Natural") +
coord_cartesian(xlim = c(1, 16), ylim = c(1, 12.5)) +
scale_x_continuous(breaks = seq(2, 16, by = 2)) +
scale_y_continuous(breaks = seq(2, 12, by = 2))
# scatter plot
c2 <- n_eff_data_wide_2 %>%
filter(gene == goi_3) %>%
ggplot(aes(x = natural, y = predicted)) +
geom_point(color = mustard) +
ggtitle(label = goi_3) +
geom_abline(slope = slope_6, intercept = intercept_6, color = "grey65" ) +
stat_cor(label.y = 12, label.x = 8) +
stat_regline_equation(label.y = 10.5, label.x = 8) +
theme_cowplot()+
scale_colour_manual(values = mustard, aesthetics = c("colour", "fill")) +
theme(plot.title = element_text(hjust=0.5), plot.subtitle = element_text(hjust=0.5)) +
ylab("N-eff Class Predicted") +
xlab("N-eff Class Natural") +
coord_cartesian(xlim = c(1, 16), ylim = c(1, 12.5)) +
scale_x_continuous(breaks = seq(2, 16, by = 2)) +
scale_y_continuous(breaks = seq(2, 12, by = 2))
correlation_coeffs <- rbind(cor_1, cor_2)
custom_colors <- c("#9875bd", "#ecb613")
d <- correlation_coeffs %>%
ggplot(aes(x = group, y = cor, fill = group)) +
geom_violin(alpha = 0.5) + geom_sina() +
scale_colour_manual(values = custom_colors, aesthetics = c("colour", "fill")) +
#ggtitle(label = "CNN Predictions Compared to \n Alignment Consensus") +
theme_cowplot() +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5), legend.position = "none") +
ylab("Correlation Coefficients") +
xlab("")
#=======================================================================
# making and saving final plot
#=======================================================================
p1 <- plot_grid(a, a2, b, b2, c, c2, nrow = 3, align="hv", axis = "b", labels = c('A', 'B', 'C', 'D', 'E', 'F'))
p2 <- plot_grid(d, labels = "G")
figure_2 <- plot_grid(p1, p2, nrow = 2, align = "hv", axis = "b", rel_heights = c(3, 1))
plot_grid(p1, p2, nrow = 2, align = "hv", axis = "b", rel_heights = c(3, 1))
ggsave(filename = "figure_2.png", plot = figure_2, width = 10, height = 12)
install.packages(here)
install.packages("here")
install.packages(
c(
"broom", "cluster", "colorspace", "corrr", "cowplot", "distill", "gapminder",
"GGally", "gganimate", "ggiraph", "ggdendro", "ggdist", "ggforce",
"ggplot2movies", "ggpointdensity", "ggraph",  "ggrepel", "ggridges",
"ggtext", "ggthemes", "gifski", "glue", "knitr", "learnr", "lemon", "magick",
"MASS", "Matrix", "nycflights13", "palmerpenguins", "patchwork", "plotly",
"plotROC", "rmarkdown", "sf", "tidymodels", "tidyverse", "transformr",
"treemapify", "umap"
)
)
install.packages(c("broom", "cluster", "colorspace", "corrr", "cowplot", "distill", "gapminder", "GGally", "gganimate", "ggiraph", "ggdendro", "ggdist", "ggforce", "ggplot2movies", "ggpointdensity", "ggraph", "ggrepel", "ggridges", "ggtext", "ggthemes", "gifski", "glue", "knitr", "learnr", "lemon", "magick", "MASS", "Matrix", "nycflights13", "palmerpenguins", "patchwork", "plotly", "plotROC", "rmarkdown", "sf", "tidymodels", "tidyverse", "transformr", "treemapify", "umap"))
install.packages(c("broom", "cluster", "colorspace", "corrr", "cowplot", "distill", "gapminder", "GGally", "gganimate", "ggiraph", "ggdendro", "ggdist", "ggforce", "ggplot2movies", "ggpointdensity", "ggraph", "ggrepel", "ggridges", "ggtext", "ggthemes", "gifski", "glue", "knitr", "learnr", "lemon", "magick", "MASS", "Matrix", "nycflights13", "palmerpenguins", "patchwork", "plotly", "plotROC", "rmarkdown", "sf", "tidymodels", "tidyverse", "transformr", "treemapify", "umap"))
library.packages('tidyverse')
install.packages('tidyverse')
install.packages('tidyverse')
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(learnr)
library(tidyverse)
library(lubridate)
update.packages(dplyr)
update.packages("dplyr")
update.packages("dplyr")
library(tidyverse)
update.packages("tidyverse")
update.packages()
# loading data
cnn_data <- read.csv(file = "./cnn_wt_max_freq.csv", header=TRUE, sep=",")
natural_data <- read.csv(file = "./natural_max_freq.csv", header=TRUE, sep=",")
joined_data <- rbind(x = cnn_data, y = natural_data)
View(joined_data)
View(joined_data)
library(dplyr)
library(tidyr)
library(tidyr)
install.packages(tidyr)
install.packages("tidyr")
install.packages("tidyr")
library(tidyr)
for_heat <- joined_data %>%
select(group, aa) %>%
pivot_wider(names_from = group, values_from = aa)
library(tidyverse)
update.packages()
library(dplyr)
library(tidyr)
# loading data
cnn_data <- read.csv(file = "./cnn_wt_max_freq.csv", header=TRUE, sep=",")
natural_data <- read.csv(file = "./natural_max_freq.csv", header=TRUE, sep=",")
joined_data <- rbind(x = cnn_data, y = natural_data)
for_heat <- joined_data %>%
select(group, aa) %>%
pivot_wider(names_from = group, values_from = aa)
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
for_heat <- joined_data %>%
select(group, aa) %>%
pivot_wider(names_from = group, values_from = aa)
library(tidyverse)
install.packages("dplyr")
install.packages("dplyr")
library(tidyverse)
remove.packages('dplyr')
remove.packages('tidyverse')
remove.packages('tidyverse')
install.packages('tidyverse')
install.packages("tidyverse")
library(tidyverse)
