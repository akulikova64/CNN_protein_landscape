summarize(count = n()) %>%
arrange(desc(count))
ufo_sightings %>%
#filter(country == "us") %>%
group_by(shape) %>%
summarize(count = n()) %>%
arrange(desc(count))
ufo_sightings %>%
filter(country == "us") %>%
group_by(city) %>%
summarize(count = n()) %>%
arrange(desc(count))
ufo_sightings %>%
filter(state == "tx") %>%
group_by(city) %>%
summarize(count = n()) %>%
arrange(desc(count))
ufo_sightings %>%
filter(country == "ca") %>%
new_data <- ufo_sightings %>%
filter(country == "ca") %>%
select(latitude, longitude)
new_data %>%
ggplot(aes(x = latitude, fill = "aquamarine")) +
geom_density(alpha = 0.5)
ufo_sightings %>%
filter(country == "ca") %>%
new_data <- ufo_sightings %>%
filter(country == "ca")
ufo_sightings %>%
filter(country == "ca") %>%
new_data <- ufo_sightings %>%
filter(country == "ca")
new_data <- ufo_sightings %>%
filter(country == "ca")
new_data %>%
ggplot(aes(x = latitude, fill = "aquamarine")) +
geom_density(alpha = 0.5)
density_data <- ufo_sightings %>%
filter(country = "ca") %>%
select(latitude, city) %>%
mutate(density = density(latitude))
density_data <- ufo_sightings %>%
filter(country == "ca") %>%
select(latitude, city) %>%
mutate(density = density(latitude))
?density
ufo_sightings %>%
filter(country == "ca")
ufo_sightings %>%
filter(country == "ca") %>%
ggplot(aes(x = latitude, fill = "aquamarine")) +
geom_density(alpha = 0.5)
ufo_sightings %>%
filter(country == "ca") %>%
ggplot(aes(x = latitude, fill = "aquamarine")) +
geom_density(alpha = 0.5)
cities <- ufo_sightings %>%
filter(country == "ca") %>%
select(latitude, city) %>%
group_by(city) %>%
summarize(count = city) %>%
arrange(desc(count))
cities <- ufo_sightings %>%
filter(country == "ca") %>%
select(latitude, city) %>%
group_by(city) %>%
summarize(count = n(city)) %>%
arrange(desc(count))
cities <- ufo_sightings %>%
filter(country == "ca") %>%
select(latitude, city) %>%
group_by(city) %>%
summarize(count = n()) %>%
arrange(desc(count))
head(cities)
cities <- ufo_sightings %>%
filter(country == "ca") %>%
select(latitude, city) %>%
group_by(city, latitude) %>%
summarize(count = n()) %>%
arrange(desc(count))
head(cities)
cities %>%
ggplot(aes(x = latitude, y = count, color = city)) +
geom_point()
cities %>%
cities %>%
ggplot(aes(x = latitude, y = count)) +
geom_point()
cities %>%
ggplot(aes(x = latitude, y = count)) +
geom_point()
cities %>%
filter(count > 50)
cities %>%
filter(count > 50) %>%
ggplot(aes(x = latitude, y = count, color = city)) +
geom_point()
cities <- ufo_sightings %>%
filter(country == "ca") %>%
select(latitude, city) %>%
group_by(city, latitude) %>%
summarize(city_count = n()) %>%
arrange(desc(count))
cities <- ufo_sightings %>%
filter(country == "ca") %>%
select(latitude, city) %>%
group_by(city, latitude) %>%
summarize(city_count = n()) %>%
arrange(desc(city_count))
head(cities)
cities %>%
filter(count > 50) %>%
ggplot(aes(x = latitude, y = city_count, color = city)) +
geom_point()
cities %>%
filter(count > 50) %>%
ggplot(aes(x = latitude, y = city_count, color = city)) +
geom_point()
head(cities)
cities %>%
filter(count > 50) %>%
ggplot(aes(x = latitude, y = city_count, color = city)) +
geom_point()
cities %>%
filter(count > 50) %>%
ggplot(aes(x = latitude, y = count, color = city)) +
geom_point()
cities <- ufo_sightings %>%
filter(country == "ca") %>%
select(latitude, city) %>%
group_by(city, latitude) %>%
summarize(count = n()) %>%
arrange(desc(count))
head(cities)
cities %>%
filter(count > 50) %>%
ggplot(aes(x = latitude, y = count, color = city)) +
geom_point()
cities %>%
filter(count > 60) %>%
ggplot(aes(x = latitude, y = count, color = city)) +
geom_point()
cities %>%
filter(count > 70) %>%
ggplot(aes(x = latitude, y = count, color = city)) +
geom_point()
cities %>%
filter(count > 75) %>%
ggplot(aes(x = latitude, y = count, color = city)) +
geom_point()
cities %>%
filter(count > 70) %>%
ggplot(aes(x = latitude, y = count, color = city)) +
geom_point() +
ylab("UFO Reports per City") +
xlab("")
cities %>%
filter(count >= 75) %>%
ggplot(aes(x = latitude, y = count, color = city)) +
geom_point() +
ylab("UFO Reports per City") +
xlab("")
cities %>%
filter(count >= 75) %>%
ggplot(aes(x = latitude, y = count, color = city)) +
geom_point() +
ylab("UFO Reports per City") +
xlab("Latitude")
cities %>%
filter(count >= 75) %>%
ggplot(aes(x = count, y = latitude, color = city)) +
geom_point() +
ylab("UFO Reports per City") +
xlab("Latitude")
cities %>%
filter(count >= 75) %>%
ggplot(aes(x = count, y = latitude, color = city)) +
geom_point() +
xlab("UFO Reports per City") +
ylab("Latitude")
cities <- ufo_sightings %>%
filter(country == "ca") %>%
group_by(latitude, city) %>%
summarize(count = n()) %>%
arrange(desc(count))
cities
cities <- ufo_sightings %>%
filter(country == "ca") %>%
group_by(latitude) %>%
summarize(count = n()) %>%
arrange(desc(count))
cities
cities <- ufo_sightings %>%
filter(country == "ca") %>%
group_by(latitude, city) %>%
summarize(count = n()) %>%
arrange(desc(count))
cities <- ufo_sightings %>%
filter(country == "ca") %>%
group_by(latitude, city) %>%
summarize(count = n()) %>%
arrange(desc(count))
head(cities)
cities <- ufo_sightings %>%
filter(country == "ca") %>%
group_by(latitude, city) %>%
summarize(count_per_latitude = n()) %>%
arrange(desc(count))
cities <- ufo_sightings %>%
filter(country == "ca") %>%
group_by(latitude, city) %>%
summarize(count_per_latitude = n()) %>%
arrange(desc(count_per_latitude))
head(cities)
cities <- ufo_sightings %>%
filter(country == "ca") %>%
group_by(latitude, city) %>%
summarize(count = n()) %>%
arrange(desc(count))
ufo_sightings %>%
filter(country == "ca") %>%
ggplot(aes(x = latitude, fill = "aquamarine")) +
geom_density(alpha = 0.5) +
xlab("Latitude") +
ylab("Density")
head(latitude_count)
latitude_count <- ufo_sightings %>%
filter(country == "ca") %>%
group_by(latitude, city) %>%
summarize(count = n()) %>%
arrange(desc(count))
head(latitude_count)
ufo_sightings %>%
filter(country == "ca") %>%
ggplot(aes(x = latitude, fill = "aquamarine")) +
#geom_density(alpha = 0.5) +
geom_bar() +
xlab("Latitude") +
ylab("Density")
ufo_sightings %>%
filter(country == "ca") %>%
ggplot(aes(x = latitude, fill = "aquamarine")) +
geom_density(alpha = 0.5) +
xlab("Latitude") +
ylab("Density")
latitude_count <- ufo_sightings %>%
filter(country == "ca") %>%
group_by(latitude, city) %>%
summarize(count = n())
latitide_count %>%
ggplot(aes(x = latitude, fill = "aquamarine")) +
geom_bar()
latitide_count %>%
ggplot(aes(x = latitude, y = count, fill = "aquamarine")) +
geom_bar()
latitude_count <- ufo_sightings %>%
filter(country == "ca") %>%
group_by(latitude, city) %>%
summarize(count = n())
latitide_count %>%
ggplot(aes(x = latitude, y = count, fill = "aquamarine")) +
geom_bar()
latitude_count <- ufo_sightings %>%
filter(country == "ca") %>%
group_by(latitude, city) %>%
summarize(count = n())
latitide_count %>%
ggplot(aes(x = latitude, y = count, fill = "aquamarine")) +
geom_bar()
latitude_count <- ufo_sightings %>%
filter(country == "ca") %>%
group_by(latitude, city) %>%
summarize(count = n())
latitude_count <- ufo_sightings %>%
filter(country == "ca") %>%
group_by(latitude, city) %>%
summarize(count = n()) %>%
ggplot(aes(x = latitude, y = count, fill = "aquamarine")) +
geom_bar()
ufo_sightings %>%
filter(country == "ca") %>%
group_by(latitude, city) %>%
summarize(count = n()) %>%
ggplot(aes(x = latitude, y = count, fill = "aquamarine")) +
geom_bar()
ufo_sightings %>%
filter(country == "ca") %>%
group_by(latitude, city) %>%
summarize(count = n()) %>%
ggplot(aes(x = latitude, fill = "aquamarine")) +
geom_bar()
ufo_sightings %>%
filter(country == "ca") %>%
ggplot(aes(x = latitude, fill = "aquamarine")) +
geom_density(alpha = 0.5) +
xlab("Latitude") +
ylab("Density")
heat_sizes <- sizes %>%
mutate(size_wt = paste(wt_size)) %>%
mutate(size_pred = paste(pred_size)) %>%
group_by(size_wt, size_pred) %>%
summarise(count = n())
heat_sizes %>%
ggplot(aes(x = size_wt, y = size_pred, fill = count)) +
geom_tile() +
#scale_fill_gradient(low = "bisque", high = "bisque4") +
scale_fill_gradient(low = "antiquewhite", high = "grey20") +
xlab("WT Residue Sizes") +
ylab("Predicted Residue Sizes") +
theme(panel.background = element_blank()) +
theme_cowplot()
aa_summary <- pred_vs_wt %>%
group_by(wt_aa) %>%
summarise(count = n())
library(ggplot2)
library(knitr)
library(cowplot)
library(tidyverse)
library(yardstick)
library(dplyr)
library(ggpubr)
library(yardstick)
library(tidyr)
library(scales)
# looking at training predictions (cgm cnn)
options(scipen = 999)
pred_vs_wt <- read.csv(file="./predictions_model_30.csv", header=TRUE, sep=",")
classes <- pred_vs_wt %>%
mutate(wt_class = map(wt_aa, function(x) {
if (x %in% c("F", "Y", "W")) return ("aromatic")
if (x %in% c("D", "E")) return ("negative")
if (x %in% c("K", "R", "H")) return ("positive")
if (x %in% c("G", "A", "V", "L", "M", "I")) return ("aliphatic")
if (x %in% c("S", "T", "C", "N", "Q")) return ("polar")
if (x %in% c("P")) return ("proline")
}))
classes <- classes %>%
mutate(pred_class = map(pred_aa, function(x) {
if (x %in% c("F", "Y", "W")) return ("aromatic")
if (x %in% c("D", "E")) return ("negative")
if (x %in% c("K", "R", "H")) return ("positive")
if (x %in% c("G", "A", "V", "L", "M", "I")) return ("aliphatic")
if (x %in% c("S", "T", "C", "N", "Q")) return ("polar")
if (x %in% c("P")) return ("proline")
}))
group_counts <- classes %>%
mutate(class = paste(wt_class)) %>%
group_by(class) %>%
summarize(count = n())
matches <- classes %>%
mutate(class = paste(wt_class)) %>%
mutate(class_2 = paste(pred_class)) %>%
filter(class == class_2) %>%
group_by(class) %>%
summarise(matches = n())
joined <- left_join(group_counts, matches)
joined[is.na(joined)] <- 0
joined <- joined %>%
mutate(prop_correct = matches/count)
# Bar chart showing the percent within-class predictions
joined %>%
ggplot(aes(x = class, y = prop_correct, fill = class)) +
geom_bar(stat = "identity") +
xlab("Residue Class") +
ylab("Proportion of Within-Class Predictions") +
geom_text(aes(label = scales::percent(prop_correct), y = prop_correct, group = class), position = position_dodge(width = 1), vjust = -0.5) +
theme_cowplot()
# Heat map of predictions and mispredictions
heat_classes <- classes %>%
mutate(class_wt = paste(wt_class)) %>%
mutate(class_pred = paste(pred_class)) %>%
group_by(class_wt, class_pred) %>%
summarise(count = n())
heat_classes%>%
ggplot(aes(x = class_wt, y = class_pred, fill = count)) +
geom_tile() +
#scale_fill_gradient(low = "bisque", high = "bisque4") +
scale_fill_gradient(low = "antiquewhite", high = "grey20") +
xlab("WT Residue Classes") +
ylab("Predicted Residue Classes") +
theme(panel.background = element_blank()) +
theme_cowplot()
# Heat map showing raw aa predictions and mispredictions
heat_aa <- classes %>%
mutate(aa_wt = paste(wt_aa)) %>%
mutate(aa_pred = paste(pred_aa)) %>%
group_by(aa_wt, aa_pred) %>%
summarise(count = n())
heat_aa %>%
ggplot(aes(x = aa_wt, y = aa_pred, fill = count)) +
geom_tile() +
#scale_fill_gradient(low = "bisque", high = "bisque4") +
scale_fill_gradient(low = "grey97", high = "grey20") +
xlab("WT Residues") +
ylab("Predicted Residues") +
theme(panel.border=element_rect(fill = NA, colour=alpha('black', .5), size=10)) +
theme_cowplot()
# heat by aa sizes
# label by sizes
sizes_wt <- pred_vs_wt %>%
mutate(wt_size = map(wt_aa, function(x) {
if (x %in% c("F", "Y", "W")) return ("1-very large")
if (x %in% c("I", "L", "M", "K", "R")) return ("2-large")
if (x %in% c("V", "H", "E", "Q")) return ("3-medium")
if (x %in% c("C", "P", "T", "D", "N")) return ("4-small")
if (x %in% c("A", "G", "S")) return ("5-very small")
}))
sizes <- sizes_wt %>%
mutate(pred_size = map(wt_aa, function(x) {
if (x %in% c("F", "Y", "W")) return ("1-very large")
if (x %in% c("I", "L", "M", "K", "R")) return ("2-large")
if (x %in% c("V", "H", "E", "Q")) return ("3-medium")
if (x %in% c("C", "P", "T", "D", "N")) return ("4-small")
if (x %in% c("A", "G", "S")) return ("5-very small")
}))
heat_sizes <- sizes %>%
mutate(size_wt = paste(wt_size)) %>%
mutate(size_pred = paste(pred_size)) %>%
group_by(size_wt, size_pred) %>%
summarise(count = n())
heat_sizes %>%
ggplot(aes(x = size_wt, y = size_pred, fill = count)) +
geom_tile() +
#scale_fill_gradient(low = "bisque", high = "bisque4") +
scale_fill_gradient(low = "antiquewhite", high = "grey20") +
xlab("WT Residue Sizes") +
ylab("Predicted Residue Sizes") +
theme(panel.background = element_blank()) +
theme_cowplot()
# let's count up the different wt amino acids in the test set:
aa_summary <- pred_vs_wt %>%
group_by(wt_aa) %>%
summarise(count = n())
library(tidyverse)
library(yardstick)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(cowplot)
library(tidyr)
library(sqldf)
library(sinaplot)
library(ggforce)
# reading csv files
natural_var <- read.csv(file="./stats_align_all.csv", header=TRUE, sep=",")
cnn_var <- read.csv(file="./stats_cnn.csv", header=TRUE, sep=",")
setwd("C:/Users/avch/Desktop/Natural_var_project/data/output")
# reading csv files
natural_var <- read.csv(file="./stats_align_all.csv", header=TRUE, sep=",")
cnn_var <- read.csv(file="./stats_cnn.csv", header=TRUE, sep=",")
natural_var <- natural_var %>%
nest(q_natural = c(q_H:q_C))
cnn_var <- cnn_var %>%
nest(q_cnn = c(q_H:q_C))
joined_data <- inner_join(x = natural_var, y = cnn_var, by = c('position', 'gene'))
# comparing n_eff between cnn and natural data.
n_eff_data_1 <- joined_data %>%
select(n_eff.x, gene, position)
names(n_eff_data_1) <- c('n_eff', 'gene', 'position')
n_eff_data_1$group <- 'natural'
n_eff_data_2 <- joined_data %>%
select(n_eff.y, gene, position)
names(n_eff_data_2) <- c('n_eff', 'gene', 'position')
n_eff_data_2$group <- 'predicted'
n_eff_data <- rbind(n_eff_data_1, n_eff_data_2)
# making df wider for plot
n_eff_data_wide <- n_eff_data %>%
pivot_wider(names_from = group, values_from = n_eff)
#====================================================================================
# making violin plot of correlations for all proteins ordered from highest to lowest
#====================================================================================
cor <- n_eff_data_wide %>%
select(-position) %>%
na.omit() %>%
group_by(gene) %>%
summarise(cor = cor(natural, predicted))
cor %>%
ggplot(aes(x = "", y = cor)) +
geom_violin(fill = "grey75") + geom_sina() +
ggtitle(label = "N-eff natural ~ N-eff predicted") +
theme_cowplot() +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5)) +
xlab("") +
ylab("correlation coefficients")
View(cor)
#====================================================================================
# making violin plot of correlations for all proteins ordered from highest to lowest
#====================================================================================
cor <- n_eff_data_wide %>%
select(-position) %>%
na.omit() %>%
group_by(gene) %>%
summarise(cor = cor(natural, predicted))
n_eff_data_wide %>%
select(gene, natural, predicted)
cor <- n_eff_data_wide %>%
select(gene, natural, predicted) %>%
na.omit()
n_eff_data_wide %>%
select(gene, natural, predicted) %>%
na.omit()
n_eff_data_wide %>%
select(gene, natural, predicted) %>%
na.omit() %>%
group_by(gene)
n_eff_data_wide %>%
select(gene, natural, predicted) %>%
na.omit() %>%
group_by(gene) %>%
summarise(cor = cor(natural, predicted))
